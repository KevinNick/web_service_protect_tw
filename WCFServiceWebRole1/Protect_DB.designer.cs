#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.0
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceWebRole1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ProtectAzure")]
	public partial class Protect_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertAlarmInfo(AlarmInfo instance);
    partial void UpdateAlarmInfo(AlarmInfo instance);
    partial void DeleteAlarmInfo(AlarmInfo instance);
    partial void InsertUserInfo(UserInfo instance);
    partial void UpdateUserInfo(UserInfo instance);
    partial void DeleteUserInfo(UserInfo instance);
    partial void InsertAlarmType(AlarmType instance);
    partial void UpdateAlarmType(AlarmType instance);
    partial void DeleteAlarmType(AlarmType instance);
    partial void InsertDisasterDB(DisasterDB instance);
    partial void UpdateDisasterDB(DisasterDB instance);
    partial void DeleteDisasterDB(DisasterDB instance);
    partial void InsertGroupMapping(GroupMapping instance);
    partial void UpdateGroupMapping(GroupMapping instance);
    partial void DeleteGroupMapping(GroupMapping instance);
    partial void InsertInfoTypeDB(InfoTypeDB instance);
    partial void UpdateInfoTypeDB(InfoTypeDB instance);
    partial void DeleteInfoTypeDB(InfoTypeDB instance);
    partial void InsertMachineInfo(MachineInfo instance);
    partial void UpdateMachineInfo(MachineInfo instance);
    partial void DeleteMachineInfo(MachineInfo instance);
    partial void InsertMessageManage(MessageManage instance);
    partial void UpdateMessageManage(MessageManage instance);
    partial void DeleteMessageManage(MessageManage instance);
    partial void InsertPhoneNotification(PhoneNotification instance);
    partial void UpdatePhoneNotification(PhoneNotification instance);
    partial void DeletePhoneNotification(PhoneNotification instance);
    partial void InsertServerKey(ServerKey instance);
    partial void UpdateServerKey(ServerKey instance);
    partial void DeleteServerKey(ServerKey instance);
    partial void InsertSiteDB(SiteDB instance);
    partial void UpdateSiteDB(SiteDB instance);
    partial void DeleteSiteDB(SiteDB instance);
    partial void InsertTaiwanLocation(TaiwanLocation instance);
    partial void UpdateTaiwanLocation(TaiwanLocation instance);
    partial void DeleteTaiwanLocation(TaiwanLocation instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    #endregion
		
		public Protect_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ProtectAzureConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Protect_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Protect_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Protect_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Protect_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AlarmInfo> AlarmInfo
		{
			get
			{
				return this.GetTable<AlarmInfo>();
			}
		}
		
		public System.Data.Linq.Table<UserInfo> UserInfo
		{
			get
			{
				return this.GetTable<UserInfo>();
			}
		}
		
		public System.Data.Linq.Table<AlarmType> AlarmType
		{
			get
			{
				return this.GetTable<AlarmType>();
			}
		}
		
		public System.Data.Linq.Table<DisasterDB> DisasterDB
		{
			get
			{
				return this.GetTable<DisasterDB>();
			}
		}
		
		public System.Data.Linq.Table<GroupMapping> GroupMapping
		{
			get
			{
				return this.GetTable<GroupMapping>();
			}
		}
		
		public System.Data.Linq.Table<InfoTypeDB> InfoTypeDB
		{
			get
			{
				return this.GetTable<InfoTypeDB>();
			}
		}
		
		public System.Data.Linq.Table<MachineInfo> MachineInfo
		{
			get
			{
				return this.GetTable<MachineInfo>();
			}
		}
		
		public System.Data.Linq.Table<MessageManage> MessageManage
		{
			get
			{
				return this.GetTable<MessageManage>();
			}
		}
		
		public System.Data.Linq.Table<PhoneNotification> PhoneNotification
		{
			get
			{
				return this.GetTable<PhoneNotification>();
			}
		}
		
		public System.Data.Linq.Table<ServerKey> ServerKey
		{
			get
			{
				return this.GetTable<ServerKey>();
			}
		}
		
		public System.Data.Linq.Table<SiteDB> SiteDB
		{
			get
			{
				return this.GetTable<SiteDB>();
			}
		}
		
		public System.Data.Linq.Table<TaiwanLocation> TaiwanLocation
		{
			get
			{
				return this.GetTable<TaiwanLocation>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroup
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmInfo")]
	public partial class AlarmInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlarmID;
		
		private System.Nullable<double> _Longitude;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _AlarmType;
		
		private System.Nullable<System.DateTime> _AlarmTime;
		
		private string _Alarmmessage;
		
		private EntityRef<UserInfo> _UserInfo;
		
		private EntityRef<AlarmType> _AlarmType1;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlarmIDChanging(int value);
    partial void OnAlarmIDChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnAlarmTypeChanging(System.Nullable<int> value);
    partial void OnAlarmTypeChanged();
    partial void OnAlarmTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnAlarmTimeChanged();
    partial void OnAlarmmessageChanging(string value);
    partial void OnAlarmmessageChanged();
    #endregion
		
		public AlarmInfo()
		{
			this._UserInfo = default(EntityRef<UserInfo>);
			this._AlarmType1 = default(EntityRef<AlarmType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlarmID
		{
			get
			{
				return this._AlarmID;
			}
			set
			{
				if ((this._AlarmID != value))
				{
					this.OnAlarmIDChanging(value);
					this.SendPropertyChanging();
					this._AlarmID = value;
					this.SendPropertyChanged("AlarmID");
					this.OnAlarmIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmType", DbType="Int")]
		public System.Nullable<int> AlarmType
		{
			get
			{
				return this._AlarmType;
			}
			set
			{
				if ((this._AlarmType != value))
				{
					if (this._AlarmType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlarmTypeChanging(value);
					this.SendPropertyChanging();
					this._AlarmType = value;
					this.SendPropertyChanged("AlarmType");
					this.OnAlarmTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlarmTime
		{
			get
			{
				return this._AlarmTime;
			}
			set
			{
				if ((this._AlarmTime != value))
				{
					this.OnAlarmTimeChanging(value);
					this.SendPropertyChanging();
					this._AlarmTime = value;
					this.SendPropertyChanged("AlarmTime");
					this.OnAlarmTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Alarmmessage", DbType="NVarChar(MAX)")]
		public string Alarmmessage
		{
			get
			{
				return this._Alarmmessage;
			}
			set
			{
				if ((this._Alarmmessage != value))
				{
					this.OnAlarmmessageChanging(value);
					this.SendPropertyChanging();
					this._Alarmmessage = value;
					this.SendPropertyChanged("Alarmmessage");
					this.OnAlarmmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_AlarmInfo", Storage="_UserInfo", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.AlarmInfo.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.AlarmInfo.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmType_AlarmInfo", Storage="_AlarmType1", ThisKey="AlarmType", OtherKey="AlarmTypeID", IsForeignKey=true)]
		public AlarmType AlarmType1
		{
			get
			{
				return this._AlarmType1.Entity;
			}
			set
			{
				AlarmType previousValue = this._AlarmType1.Entity;
				if (((previousValue != value) 
							|| (this._AlarmType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlarmType1.Entity = null;
						previousValue.AlarmInfo.Remove(this);
					}
					this._AlarmType1.Entity = value;
					if ((value != null))
					{
						value.AlarmInfo.Add(this);
						this._AlarmType = value.AlarmTypeID;
					}
					else
					{
						this._AlarmType = default(Nullable<int>);
					}
					this.SendPropertyChanged("AlarmType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserInfo")]
	public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _PhoneURL;
		
		private System.Nullable<double> _UserLongitude;
		
		private System.Nullable<double> _UserLatitude;
		
		private string _PhoneType;
		
		private string _EmailAddress;
		
		private string _LocationAddress;
		
		private string _PhoneNumber;
		
		private EntitySet<AlarmInfo> _AlarmInfo;
		
		private EntitySet<GroupMapping> _GroupMapping;
		
		private EntitySet<MessageManage> _MessageManage;
		
		private EntitySet<PhoneNotification> _PhoneNotification;
		
		private EntitySet<UserGroup> _UserGroup;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneURLChanging(string value);
    partial void OnPhoneURLChanged();
    partial void OnUserLongitudeChanging(System.Nullable<double> value);
    partial void OnUserLongitudeChanged();
    partial void OnUserLatitudeChanging(System.Nullable<double> value);
    partial void OnUserLatitudeChanged();
    partial void OnPhoneTypeChanging(string value);
    partial void OnPhoneTypeChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnLocationAddressChanging(string value);
    partial void OnLocationAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public UserInfo()
		{
			this._AlarmInfo = new EntitySet<AlarmInfo>(new Action<AlarmInfo>(this.attach_AlarmInfo), new Action<AlarmInfo>(this.detach_AlarmInfo));
			this._GroupMapping = new EntitySet<GroupMapping>(new Action<GroupMapping>(this.attach_GroupMapping), new Action<GroupMapping>(this.detach_GroupMapping));
			this._MessageManage = new EntitySet<MessageManage>(new Action<MessageManage>(this.attach_MessageManage), new Action<MessageManage>(this.detach_MessageManage));
			this._PhoneNotification = new EntitySet<PhoneNotification>(new Action<PhoneNotification>(this.attach_PhoneNotification), new Action<PhoneNotification>(this.detach_PhoneNotification));
			this._UserGroup = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroup), new Action<UserGroup>(this.detach_UserGroup));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(20)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneURL", DbType="NVarChar(MAX)")]
		public string PhoneURL
		{
			get
			{
				return this._PhoneURL;
			}
			set
			{
				if ((this._PhoneURL != value))
				{
					this.OnPhoneURLChanging(value);
					this.SendPropertyChanging();
					this._PhoneURL = value;
					this.SendPropertyChanged("PhoneURL");
					this.OnPhoneURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLongitude", DbType="Float")]
		public System.Nullable<double> UserLongitude
		{
			get
			{
				return this._UserLongitude;
			}
			set
			{
				if ((this._UserLongitude != value))
				{
					this.OnUserLongitudeChanging(value);
					this.SendPropertyChanging();
					this._UserLongitude = value;
					this.SendPropertyChanged("UserLongitude");
					this.OnUserLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLatitude", DbType="Float")]
		public System.Nullable<double> UserLatitude
		{
			get
			{
				return this._UserLatitude;
			}
			set
			{
				if ((this._UserLatitude != value))
				{
					this.OnUserLatitudeChanging(value);
					this.SendPropertyChanging();
					this._UserLatitude = value;
					this.SendPropertyChanged("UserLatitude");
					this.OnUserLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneType", DbType="NVarChar(50)")]
		public string PhoneType
		{
			get
			{
				return this._PhoneType;
			}
			set
			{
				if ((this._PhoneType != value))
				{
					this.OnPhoneTypeChanging(value);
					this.SendPropertyChanging();
					this._PhoneType = value;
					this.SendPropertyChanged("PhoneType");
					this.OnPhoneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(MAX)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationAddress", DbType="NVarChar(MAX)")]
		public string LocationAddress
		{
			get
			{
				return this._LocationAddress;
			}
			set
			{
				if ((this._LocationAddress != value))
				{
					this.OnLocationAddressChanging(value);
					this.SendPropertyChanging();
					this._LocationAddress = value;
					this.SendPropertyChanged("LocationAddress");
					this.OnLocationAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_AlarmInfo", Storage="_AlarmInfo", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<AlarmInfo> AlarmInfo
		{
			get
			{
				return this._AlarmInfo;
			}
			set
			{
				this._AlarmInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_GroupMapping", Storage="_GroupMapping", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<GroupMapping> GroupMapping
		{
			get
			{
				return this._GroupMapping;
			}
			set
			{
				this._GroupMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_MessageManage", Storage="_MessageManage", ThisKey="UserID", OtherKey="MessageUserID")]
		public EntitySet<MessageManage> MessageManage
		{
			get
			{
				return this._MessageManage;
			}
			set
			{
				this._MessageManage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_PhoneNotification", Storage="_PhoneNotification", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<PhoneNotification> PhoneNotification
		{
			get
			{
				return this._PhoneNotification;
			}
			set
			{
				this._PhoneNotification.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_UserGroup", Storage="_UserGroup", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserGroup> UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				this._UserGroup.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlarmInfo(AlarmInfo entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_AlarmInfo(AlarmInfo entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
		
		private void attach_GroupMapping(GroupMapping entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_GroupMapping(GroupMapping entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
		
		private void attach_MessageManage(MessageManage entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_MessageManage(MessageManage entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
		
		private void attach_PhoneNotification(PhoneNotification entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_PhoneNotification(PhoneNotification entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
		
		private void attach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = this;
		}
		
		private void detach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.UserInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmType")]
	public partial class AlarmType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlarmTypeID;
		
		private string _AlarmName;
		
		private EntitySet<AlarmInfo> _AlarmInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlarmTypeIDChanging(int value);
    partial void OnAlarmTypeIDChanged();
    partial void OnAlarmNameChanging(string value);
    partial void OnAlarmNameChanged();
    #endregion
		
		public AlarmType()
		{
			this._AlarmInfo = new EntitySet<AlarmInfo>(new Action<AlarmInfo>(this.attach_AlarmInfo), new Action<AlarmInfo>(this.detach_AlarmInfo));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlarmTypeID
		{
			get
			{
				return this._AlarmTypeID;
			}
			set
			{
				if ((this._AlarmTypeID != value))
				{
					this.OnAlarmTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AlarmTypeID = value;
					this.SendPropertyChanged("AlarmTypeID");
					this.OnAlarmTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmName", DbType="NVarChar(50)")]
		public string AlarmName
		{
			get
			{
				return this._AlarmName;
			}
			set
			{
				if ((this._AlarmName != value))
				{
					this.OnAlarmNameChanging(value);
					this.SendPropertyChanging();
					this._AlarmName = value;
					this.SendPropertyChanged("AlarmName");
					this.OnAlarmNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmType_AlarmInfo", Storage="_AlarmInfo", ThisKey="AlarmTypeID", OtherKey="AlarmType")]
		public EntitySet<AlarmInfo> AlarmInfo
		{
			get
			{
				return this._AlarmInfo;
			}
			set
			{
				this._AlarmInfo.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlarmInfo(AlarmInfo entity)
		{
			this.SendPropertyChanging();
			entity.AlarmType1 = this;
		}
		
		private void detach_AlarmInfo(AlarmInfo entity)
		{
			this.SendPropertyChanging();
			entity.AlarmType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisasterDB")]
	public partial class DisasterDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DisasterID;
		
		private string _DisasterDataID;
		
		private string _DisasterTitle;
		
		private System.Nullable<System.DateTime> _DisasterUpdate;
		
		private string _DisasterSummary;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisasterIDChanging(int value);
    partial void OnDisasterIDChanged();
    partial void OnDisasterDataIDChanging(string value);
    partial void OnDisasterDataIDChanged();
    partial void OnDisasterTitleChanging(string value);
    partial void OnDisasterTitleChanged();
    partial void OnDisasterUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDisasterUpdateChanged();
    partial void OnDisasterSummaryChanging(string value);
    partial void OnDisasterSummaryChanged();
    #endregion
		
		public DisasterDB()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisasterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DisasterID
		{
			get
			{
				return this._DisasterID;
			}
			set
			{
				if ((this._DisasterID != value))
				{
					this.OnDisasterIDChanging(value);
					this.SendPropertyChanging();
					this._DisasterID = value;
					this.SendPropertyChanged("DisasterID");
					this.OnDisasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisasterDataID", DbType="NVarChar(MAX)")]
		public string DisasterDataID
		{
			get
			{
				return this._DisasterDataID;
			}
			set
			{
				if ((this._DisasterDataID != value))
				{
					this.OnDisasterDataIDChanging(value);
					this.SendPropertyChanging();
					this._DisasterDataID = value;
					this.SendPropertyChanged("DisasterDataID");
					this.OnDisasterDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisasterTitle", DbType="NVarChar(30)")]
		public string DisasterTitle
		{
			get
			{
				return this._DisasterTitle;
			}
			set
			{
				if ((this._DisasterTitle != value))
				{
					this.OnDisasterTitleChanging(value);
					this.SendPropertyChanging();
					this._DisasterTitle = value;
					this.SendPropertyChanged("DisasterTitle");
					this.OnDisasterTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisasterUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DisasterUpdate
		{
			get
			{
				return this._DisasterUpdate;
			}
			set
			{
				if ((this._DisasterUpdate != value))
				{
					this.OnDisasterUpdateChanging(value);
					this.SendPropertyChanging();
					this._DisasterUpdate = value;
					this.SendPropertyChanged("DisasterUpdate");
					this.OnDisasterUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisasterSummary", DbType="NVarChar(MAX)")]
		public string DisasterSummary
		{
			get
			{
				return this._DisasterSummary;
			}
			set
			{
				if ((this._DisasterSummary != value))
				{
					this.OnDisasterSummaryChanging(value);
					this.SendPropertyChanging();
					this._DisasterSummary = value;
					this.SendPropertyChanged("DisasterSummary");
					this.OnDisasterSummaryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupMapping")]
	public partial class GroupMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupMappingID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _GroupID;
		
		private EntityRef<UserInfo> _UserInfo;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupMappingIDChanging(int value);
    partial void OnGroupMappingIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public GroupMapping()
		{
			this._UserInfo = default(EntityRef<UserInfo>);
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupMappingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupMappingID
		{
			get
			{
				return this._GroupMappingID;
			}
			set
			{
				if ((this._GroupMappingID != value))
				{
					this.OnGroupMappingIDChanging(value);
					this.SendPropertyChanging();
					this._GroupMappingID = value;
					this.SendPropertyChanged("GroupMappingID");
					this.OnGroupMappingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_GroupMapping", Storage="_UserInfo", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.GroupMapping.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.GroupMapping.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupMapping", Storage="_UserGroup", ThisKey="GroupID", OtherKey="UserGroupID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.GroupMapping.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.GroupMapping.Add(this);
						this._GroupID = value.UserGroupID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InfoTypeDB")]
	public partial class InfoTypeDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InfoTypeID;
		
		private string _InfoName;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInfoTypeIDChanging(int value);
    partial void OnInfoTypeIDChanged();
    partial void OnInfoNameChanging(string value);
    partial void OnInfoNameChanged();
    #endregion
		
		public InfoTypeDB()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InfoTypeID
		{
			get
			{
				return this._InfoTypeID;
			}
			set
			{
				if ((this._InfoTypeID != value))
				{
					this.OnInfoTypeIDChanging(value);
					this.SendPropertyChanging();
					this._InfoTypeID = value;
					this.SendPropertyChanged("InfoTypeID");
					this.OnInfoTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfoName", DbType="NVarChar(MAX)")]
		public string InfoName
		{
			get
			{
				return this._InfoName;
			}
			set
			{
				if ((this._InfoName != value))
				{
					this.OnInfoNameChanging(value);
					this.SendPropertyChanging();
					this._InfoName = value;
					this.SendPropertyChanged("InfoName");
					this.OnInfoNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MachineInfo")]
	public partial class MachineInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MachineID;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineIDChanging(int value);
    partial void OnMachineIDChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    #endregion
		
		public MachineInfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MachineID
		{
			get
			{
				return this._MachineID;
			}
			set
			{
				if ((this._MachineID != value))
				{
					this.OnMachineIDChanging(value);
					this.SendPropertyChanging();
					this._MachineID = value;
					this.SendPropertyChanged("MachineID");
					this.OnMachineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageManage")]
	public partial class MessageManage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private System.Nullable<System.DateTime> _MessageTime;
		
		private string _MessageContect;
		
		private System.Nullable<int> _MessageMark;
		
		private System.Nullable<double> _MessageLongitude;
		
		private System.Nullable<double> _MessageLatitude;
		
		private System.Nullable<int> _MessagePriolotyID;
		
		private System.Nullable<int> _MessageUserID;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnMessageTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnMessageTimeChanged();
    partial void OnMessageContectChanging(string value);
    partial void OnMessageContectChanged();
    partial void OnMessageMarkChanging(System.Nullable<int> value);
    partial void OnMessageMarkChanged();
    partial void OnMessageLongitudeChanging(System.Nullable<double> value);
    partial void OnMessageLongitudeChanged();
    partial void OnMessageLatitudeChanging(System.Nullable<double> value);
    partial void OnMessageLatitudeChanged();
    partial void OnMessagePriolotyIDChanging(System.Nullable<int> value);
    partial void OnMessagePriolotyIDChanged();
    partial void OnMessageUserIDChanging(System.Nullable<int> value);
    partial void OnMessageUserIDChanged();
    #endregion
		
		public MessageManage()
		{
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> MessageTime
		{
			get
			{
				return this._MessageTime;
			}
			set
			{
				if ((this._MessageTime != value))
				{
					this.OnMessageTimeChanging(value);
					this.SendPropertyChanging();
					this._MessageTime = value;
					this.SendPropertyChanged("MessageTime");
					this.OnMessageTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageContect", DbType="NVarChar(MAX)")]
		public string MessageContect
		{
			get
			{
				return this._MessageContect;
			}
			set
			{
				if ((this._MessageContect != value))
				{
					this.OnMessageContectChanging(value);
					this.SendPropertyChanging();
					this._MessageContect = value;
					this.SendPropertyChanged("MessageContect");
					this.OnMessageContectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageMark", DbType="Int")]
		public System.Nullable<int> MessageMark
		{
			get
			{
				return this._MessageMark;
			}
			set
			{
				if ((this._MessageMark != value))
				{
					this.OnMessageMarkChanging(value);
					this.SendPropertyChanging();
					this._MessageMark = value;
					this.SendPropertyChanged("MessageMark");
					this.OnMessageMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageLongitude", DbType="Float")]
		public System.Nullable<double> MessageLongitude
		{
			get
			{
				return this._MessageLongitude;
			}
			set
			{
				if ((this._MessageLongitude != value))
				{
					this.OnMessageLongitudeChanging(value);
					this.SendPropertyChanging();
					this._MessageLongitude = value;
					this.SendPropertyChanged("MessageLongitude");
					this.OnMessageLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageLatitude", DbType="Float")]
		public System.Nullable<double> MessageLatitude
		{
			get
			{
				return this._MessageLatitude;
			}
			set
			{
				if ((this._MessageLatitude != value))
				{
					this.OnMessageLatitudeChanging(value);
					this.SendPropertyChanging();
					this._MessageLatitude = value;
					this.SendPropertyChanged("MessageLatitude");
					this.OnMessageLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessagePriolotyID", DbType="Int")]
		public System.Nullable<int> MessagePriolotyID
		{
			get
			{
				return this._MessagePriolotyID;
			}
			set
			{
				if ((this._MessagePriolotyID != value))
				{
					this.OnMessagePriolotyIDChanging(value);
					this.SendPropertyChanging();
					this._MessagePriolotyID = value;
					this.SendPropertyChanged("MessagePriolotyID");
					this.OnMessagePriolotyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageUserID", DbType="Int")]
		public System.Nullable<int> MessageUserID
		{
			get
			{
				return this._MessageUserID;
			}
			set
			{
				if ((this._MessageUserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageUserIDChanging(value);
					this.SendPropertyChanging();
					this._MessageUserID = value;
					this.SendPropertyChanged("MessageUserID");
					this.OnMessageUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_MessageManage", Storage="_UserInfo", ThisKey="MessageUserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.MessageManage.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.MessageManage.Add(this);
						this._MessageUserID = value.UserID;
					}
					else
					{
						this._MessageUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhoneNotification")]
	public partial class PhoneNotification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationID;
		
		private string _PhoneType;
		
		private string _NotificationUrl;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _ServerKeyID;
		
		private EntityRef<UserInfo> _UserInfo;
		
		private EntityRef<ServerKey> _ServerKey;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIDChanging(int value);
    partial void OnNotificationIDChanged();
    partial void OnPhoneTypeChanging(string value);
    partial void OnPhoneTypeChanged();
    partial void OnNotificationUrlChanging(string value);
    partial void OnNotificationUrlChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnServerKeyIDChanging(System.Nullable<int> value);
    partial void OnServerKeyIDChanged();
    #endregion
		
		public PhoneNotification()
		{
			this._UserInfo = default(EntityRef<UserInfo>);
			this._ServerKey = default(EntityRef<ServerKey>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationID
		{
			get
			{
				return this._NotificationID;
			}
			set
			{
				if ((this._NotificationID != value))
				{
					this.OnNotificationIDChanging(value);
					this.SendPropertyChanging();
					this._NotificationID = value;
					this.SendPropertyChanged("NotificationID");
					this.OnNotificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneType", DbType="NVarChar(50)")]
		public string PhoneType
		{
			get
			{
				return this._PhoneType;
			}
			set
			{
				if ((this._PhoneType != value))
				{
					this.OnPhoneTypeChanging(value);
					this.SendPropertyChanging();
					this._PhoneType = value;
					this.SendPropertyChanged("PhoneType");
					this.OnPhoneTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationUrl", DbType="NVarChar(MAX)")]
		public string NotificationUrl
		{
			get
			{
				return this._NotificationUrl;
			}
			set
			{
				if ((this._NotificationUrl != value))
				{
					this.OnNotificationUrlChanging(value);
					this.SendPropertyChanging();
					this._NotificationUrl = value;
					this.SendPropertyChanged("NotificationUrl");
					this.OnNotificationUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerKeyID", DbType="Int")]
		public System.Nullable<int> ServerKeyID
		{
			get
			{
				return this._ServerKeyID;
			}
			set
			{
				if ((this._ServerKeyID != value))
				{
					if (this._ServerKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServerKeyIDChanging(value);
					this.SendPropertyChanging();
					this._ServerKeyID = value;
					this.SendPropertyChanged("ServerKeyID");
					this.OnServerKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_PhoneNotification", Storage="_UserInfo", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.PhoneNotification.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.PhoneNotification.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServerKey_PhoneNotification", Storage="_ServerKey", ThisKey="ServerKeyID", OtherKey="ServerKeyID", IsForeignKey=true)]
		public ServerKey ServerKey
		{
			get
			{
				return this._ServerKey.Entity;
			}
			set
			{
				ServerKey previousValue = this._ServerKey.Entity;
				if (((previousValue != value) 
							|| (this._ServerKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServerKey.Entity = null;
						previousValue.PhoneNotification.Remove(this);
					}
					this._ServerKey.Entity = value;
					if ((value != null))
					{
						value.PhoneNotification.Add(this);
						this._ServerKeyID = value.ServerKeyID;
					}
					else
					{
						this._ServerKeyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServerKey");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServerKey")]
	public partial class ServerKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ServerKeyID;
		
		private string _ServerKeyString;
		
		private string _ServerType;
		
		private EntitySet<PhoneNotification> _PhoneNotification;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnServerKeyIDChanging(int value);
    partial void OnServerKeyIDChanged();
    partial void OnServerKeyStringChanging(string value);
    partial void OnServerKeyStringChanged();
    partial void OnServerTypeChanging(string value);
    partial void OnServerTypeChanged();
    #endregion
		
		public ServerKey()
		{
			this._PhoneNotification = new EntitySet<PhoneNotification>(new Action<PhoneNotification>(this.attach_PhoneNotification), new Action<PhoneNotification>(this.detach_PhoneNotification));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerKeyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ServerKeyID
		{
			get
			{
				return this._ServerKeyID;
			}
			set
			{
				if ((this._ServerKeyID != value))
				{
					this.OnServerKeyIDChanging(value);
					this.SendPropertyChanging();
					this._ServerKeyID = value;
					this.SendPropertyChanged("ServerKeyID");
					this.OnServerKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerKeyString", DbType="NVarChar(MAX)")]
		public string ServerKeyString
		{
			get
			{
				return this._ServerKeyString;
			}
			set
			{
				if ((this._ServerKeyString != value))
				{
					this.OnServerKeyStringChanging(value);
					this.SendPropertyChanging();
					this._ServerKeyString = value;
					this.SendPropertyChanged("ServerKeyString");
					this.OnServerKeyStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerType", DbType="NVarChar(30)")]
		public string ServerType
		{
			get
			{
				return this._ServerType;
			}
			set
			{
				if ((this._ServerType != value))
				{
					this.OnServerTypeChanging(value);
					this.SendPropertyChanging();
					this._ServerType = value;
					this.SendPropertyChanged("ServerType");
					this.OnServerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServerKey_PhoneNotification", Storage="_PhoneNotification", ThisKey="ServerKeyID", OtherKey="ServerKeyID")]
		public EntitySet<PhoneNotification> PhoneNotification
		{
			get
			{
				return this._PhoneNotification;
			}
			set
			{
				this._PhoneNotification.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhoneNotification(PhoneNotification entity)
		{
			this.SendPropertyChanging();
			entity.ServerKey = this;
		}
		
		private void detach_PhoneNotification(PhoneNotification entity)
		{
			this.SendPropertyChanging();
			entity.ServerKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SiteDB")]
	public partial class SiteDB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SiteID;
		
		private string _SiteType;
		
		private string _SiteName;
		
		private string _SiteAddress;
		
		private System.Nullable<double> _SiteLatitude;
		
		private System.Nullable<double> _SiteLongitude;
		
		private System.Nullable<int> _SiteDescription;
		
		private string _SitePhone;
		
		private System.Nullable<int> _TaiwanLocationID;
		
		private EntityRef<TaiwanLocation> _TaiwanLocation;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnSiteTypeChanging(string value);
    partial void OnSiteTypeChanged();
    partial void OnSiteNameChanging(string value);
    partial void OnSiteNameChanged();
    partial void OnSiteAddressChanging(string value);
    partial void OnSiteAddressChanged();
    partial void OnSiteLatitudeChanging(System.Nullable<double> value);
    partial void OnSiteLatitudeChanged();
    partial void OnSiteLongitudeChanging(System.Nullable<double> value);
    partial void OnSiteLongitudeChanged();
    partial void OnSiteDescriptionChanging(System.Nullable<int> value);
    partial void OnSiteDescriptionChanged();
    partial void OnSitePhoneChanging(string value);
    partial void OnSitePhoneChanged();
    partial void OnTaiwanLocationIDChanging(System.Nullable<int> value);
    partial void OnTaiwanLocationIDChanged();
    #endregion
		
		public SiteDB()
		{
			this._TaiwanLocation = default(EntityRef<TaiwanLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteType", DbType="NVarChar(MAX)")]
		public string SiteType
		{
			get
			{
				return this._SiteType;
			}
			set
			{
				if ((this._SiteType != value))
				{
					this.OnSiteTypeChanging(value);
					this.SendPropertyChanging();
					this._SiteType = value;
					this.SendPropertyChanged("SiteType");
					this.OnSiteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteName", DbType="NVarChar(MAX)")]
		public string SiteName
		{
			get
			{
				return this._SiteName;
			}
			set
			{
				if ((this._SiteName != value))
				{
					this.OnSiteNameChanging(value);
					this.SendPropertyChanging();
					this._SiteName = value;
					this.SendPropertyChanged("SiteName");
					this.OnSiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteAddress", DbType="NVarChar(MAX)")]
		public string SiteAddress
		{
			get
			{
				return this._SiteAddress;
			}
			set
			{
				if ((this._SiteAddress != value))
				{
					this.OnSiteAddressChanging(value);
					this.SendPropertyChanging();
					this._SiteAddress = value;
					this.SendPropertyChanged("SiteAddress");
					this.OnSiteAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteLatitude", DbType="Float")]
		public System.Nullable<double> SiteLatitude
		{
			get
			{
				return this._SiteLatitude;
			}
			set
			{
				if ((this._SiteLatitude != value))
				{
					this.OnSiteLatitudeChanging(value);
					this.SendPropertyChanging();
					this._SiteLatitude = value;
					this.SendPropertyChanged("SiteLatitude");
					this.OnSiteLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteLongitude", DbType="Float")]
		public System.Nullable<double> SiteLongitude
		{
			get
			{
				return this._SiteLongitude;
			}
			set
			{
				if ((this._SiteLongitude != value))
				{
					this.OnSiteLongitudeChanging(value);
					this.SendPropertyChanging();
					this._SiteLongitude = value;
					this.SendPropertyChanged("SiteLongitude");
					this.OnSiteLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteDescription", DbType="Int")]
		public System.Nullable<int> SiteDescription
		{
			get
			{
				return this._SiteDescription;
			}
			set
			{
				if ((this._SiteDescription != value))
				{
					this.OnSiteDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SiteDescription = value;
					this.SendPropertyChanged("SiteDescription");
					this.OnSiteDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SitePhone", DbType="NVarChar(MAX)")]
		public string SitePhone
		{
			get
			{
				return this._SitePhone;
			}
			set
			{
				if ((this._SitePhone != value))
				{
					this.OnSitePhoneChanging(value);
					this.SendPropertyChanging();
					this._SitePhone = value;
					this.SendPropertyChanged("SitePhone");
					this.OnSitePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaiwanLocationID", DbType="Int")]
		public System.Nullable<int> TaiwanLocationID
		{
			get
			{
				return this._TaiwanLocationID;
			}
			set
			{
				if ((this._TaiwanLocationID != value))
				{
					if (this._TaiwanLocation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaiwanLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TaiwanLocationID = value;
					this.SendPropertyChanged("TaiwanLocationID");
					this.OnTaiwanLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaiwanLocation_SiteDB", Storage="_TaiwanLocation", ThisKey="TaiwanLocationID", OtherKey="TaiwanLocationID", IsForeignKey=true)]
		public TaiwanLocation TaiwanLocation
		{
			get
			{
				return this._TaiwanLocation.Entity;
			}
			set
			{
				TaiwanLocation previousValue = this._TaiwanLocation.Entity;
				if (((previousValue != value) 
							|| (this._TaiwanLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaiwanLocation.Entity = null;
						previousValue.SiteDB.Remove(this);
					}
					this._TaiwanLocation.Entity = value;
					if ((value != null))
					{
						value.SiteDB.Add(this);
						this._TaiwanLocationID = value.TaiwanLocationID;
					}
					else
					{
						this._TaiwanLocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TaiwanLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaiwanLocation")]
	public partial class TaiwanLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaiwanLocationID;
		
		private string _LocationName;
		
		private EntitySet<SiteDB> _SiteDB;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaiwanLocationIDChanging(int value);
    partial void OnTaiwanLocationIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    #endregion
		
		public TaiwanLocation()
		{
			this._SiteDB = new EntitySet<SiteDB>(new Action<SiteDB>(this.attach_SiteDB), new Action<SiteDB>(this.detach_SiteDB));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaiwanLocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TaiwanLocationID
		{
			get
			{
				return this._TaiwanLocationID;
			}
			set
			{
				if ((this._TaiwanLocationID != value))
				{
					this.OnTaiwanLocationIDChanging(value);
					this.SendPropertyChanging();
					this._TaiwanLocationID = value;
					this.SendPropertyChanged("TaiwanLocationID");
					this.OnTaiwanLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(50)")]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaiwanLocation_SiteDB", Storage="_SiteDB", ThisKey="TaiwanLocationID", OtherKey="TaiwanLocationID")]
		public EntitySet<SiteDB> SiteDB
		{
			get
			{
				return this._SiteDB;
			}
			set
			{
				this._SiteDB.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SiteDB(SiteDB entity)
		{
			this.SendPropertyChanging();
			entity.TaiwanLocation = this;
		}
		
		private void detach_SiteDB(SiteDB entity)
		{
			this.SendPropertyChanging();
			entity.TaiwanLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserGroupID;
		
		private string _UserGroupName;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<GroupMapping> _GroupMapping;
		
		private EntityRef<UserInfo> _UserInfo;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    partial void OnUserGroupNameChanging(string value);
    partial void OnUserGroupNameChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public UserGroup()
		{
			this._GroupMapping = new EntitySet<GroupMapping>(new Action<GroupMapping>(this.attach_GroupMapping), new Action<GroupMapping>(this.detach_GroupMapping));
			this._UserInfo = default(EntityRef<UserInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupName", DbType="NVarChar(MAX)")]
		public string UserGroupName
		{
			get
			{
				return this._UserGroupName;
			}
			set
			{
				if ((this._UserGroupName != value))
				{
					this.OnUserGroupNameChanging(value);
					this.SendPropertyChanging();
					this._UserGroupName = value;
					this.SendPropertyChanged("UserGroupName");
					this.OnUserGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupMapping", Storage="_GroupMapping", ThisKey="UserGroupID", OtherKey="GroupID")]
		public EntitySet<GroupMapping> GroupMapping
		{
			get
			{
				return this._GroupMapping;
			}
			set
			{
				this._GroupMapping.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserInfo_UserGroup", Storage="_UserInfo", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public UserInfo UserInfo
		{
			get
			{
				return this._UserInfo.Entity;
			}
			set
			{
				UserInfo previousValue = this._UserInfo.Entity;
				if (((previousValue != value) 
							|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserInfo.Entity = null;
						previousValue.UserGroup.Remove(this);
					}
					this._UserInfo.Entity = value;
					if ((value != null))
					{
						value.UserGroup.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupMapping(GroupMapping entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_GroupMapping(GroupMapping entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
}
#pragma warning restore 1591
